x-default-health-check: &default-health-check
  interval: ${HEALTH_CHECK_INTERVAL}
  timeout: ${HEALTH_CHECK_TIMEOUT}
  retries: ${HEALTH_CHECK_RETIES}
  start_period: ${HEALTH_CHECK_START_PERIOD}

networks:
  mc-infra-connector-network:
  mc-infra-manager-network:
  mc-iam-manager-network:
  mc-cost-optimizer-network:
  mc-application-manager-network:
  mc-workflow-manager-network:
  mc-data-manager-network:
  mc-observability-network:
  mc-web-console-network:

services:
##### MC-INFRA-CONNECTOR #########################################################################################################################

  mc-infra-connector:
    image: cloudbaristaorg/cb-spider:0.9.8
    pull_policy: missing
    container_name: mc-infra-connector
    platform: linux/amd64
    networks:
      - mc-infra-connector-network
      - mc-web-console-network
    ports:
      - target: 1024
        published: 1024
        protocol: tcp
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./conf/mc-infra-connector/:/root/go/src/github.com/cloud-barista/cb-spider/conf/:ro
      - ./container-volume/mc-infra-connector/meta_db/:/root/go/src/github.com/cloud-barista/cb-spider/meta_db/
      - ./container-volume/mc-infra-connector/log/:/root/go/src/github.com/cloud-barista/cb-spider/log/
    environment:
      - PLUGIN_SW=OFF
      # - SERVER_ADDRESS=localhost
      # if you leave these values empty, REST Auth will be disabled.
      # - API_USERNAME=
      # - API_PASSWORD=
      - SPIDER_LOG_LEVEL=error
      - SPIDER_HISCALL_LOG_LEVEL=error
      # - ID_TRANSFORM_MODE=ON
    healthcheck: # for CB-Spider
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:1024/spider/readyz" ]
      <<: *default-health-check

##### MC-INFRA-MANAGER #########################################################################################################################

  mc-infra-manager:
    image: cloudbaristaorg/cb-tumblebug:0.9.19
    container_name: mc-infra-manager
    pull_policy: missing
    platform: linux/amd64
    networks:
      - mc-infra-connector-network
      - mc-infra-manager-network
      - mc-web-console-network
    ports:
      - target: 1323
        published: 1323
        protocol: tcp
    depends_on: 
      - mc-infra-manager-etcd
      - mc-infra-connector
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./conf/mc-infra-manager/:/app/conf/:ro
      - ./container-volume/mc-infra-manager/meta_db/:/app/meta_db/
      - ./container-volume/mc-infra-manager/log/:/app/log/
    environment:
      # - TB_ROOT_PATH=/app
      - TB_SPIDER_REST_URL=http://mc-infra-connector:1024/spider
      - TB_ETCD_ENDPOINTS=http://mc-infra-manager-etcd:2379
      # - TB_ETCD_AUTH_ENABLED=true
      # - TB_ETCD_USERNAME=default
      # - TB_ETCD_PASSWORD=default
      # - TB_SQLITE_URL=localhost:3306 
      # - TB_SQLITE_DATABASE=cb_tumblebug 
      # - TB_SQLITE_USER=cb_tumblebug 
      # - TB_SQLITE_PASSWORD=cb_tumblebug 
      # - TB_ALLOW_ORIGINS=*
      # - TB_AUTH_ENABLED=true
      # - TB_API_USERNAME=default
      # - TB_API_PASSWORD=default
      # - TB_AUTOCONTROL_DURATION_MS=10000
      # - TB_SELF_ENDPOINT=localhost:1323
      # - TB_DRAGONFLY_REST_URL=http://cb-dragonfly:9090/dragonfly
      # - TB_DEFAULT_NAMESPACE=ns01
      # - TB_DEFAULT_CREDENTIALHOLDER=admin
      # - TB_LOGFILE_PATH=/app/log/tumblebug.log
      # - TB_LOGFILE_MAXSIZE=10
      # - TB_LOGFILE_MAXBACKUPS=3
      # - TB_LOGFILE_MAXAGE=30
      # - TB_LOGFILE_COMPRESS=false
      # - TB_LOGLEVEL=debug
      # - TB_LOGWRITER=both
      # - TB_NODE_ENV=development
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:1323/tumblebug/readyz" ]
      <<: *default-health-check

  mc-infra-manager-etcd:
    image: gcr.io/etcd-development/etcd:v3.5.14
    container_name: mc-infra-manager-etcd
    networks:
      - mc-infra-manager-network
    ports:
      - target: 2379
        published: 2379
        protocol: tcp
      - target: 2380
        published: 2380
        protocol: tcp
    volumes: 
      - ./container-volume/mc-infra-manager/etcd/data:/etcd-data
    entrypoint: /usr/local/bin/etcd
    command:
      - --name
      - s1
      - --data-dir
      - /etcd-data
      - --listen-client-urls
      - http://0.0.0.0:2379
      - --advertise-client-urls
      - http://0.0.0.0:2379
      - --listen-peer-urls
      - http://0.0.0.0:2380
      - --initial-advertise-peer-urls
      - http://0.0.0.0:2380
      - --initial-cluster
      - s1=http://0.0.0.0:2380
      - --initial-cluster-token
      - tkn
      - --initial-cluster-state
      - new
      - --log-level
      - info
      - --logger
      - zap
      - --log-outputs
      - stderr
      - --auth-token
      - simple
    healthcheck:
      test: [ "CMD", "etcdctl", "endpoint", "health", "--endpoints=http://localhost:2379"]
      <<: *default-health-check

##### MC-IAM-MANAGER #########################################################################################################################

  mc-iam-manager:
    container_name: mc-iam-manager
    image: cloudbaristaorg/mc-iam-manager:edge
    pull_policy: missing
    platform: linux/amd64
    networks:
      - mc-iam-manager-network
      - mc-infra-manager-network
      - mc-web-console-network
    ports:
      - target: 5000
        published: 5000
        protocol: tcp
    depends_on:
      - mc-iam-manager-db
      - mc-iam-manager-kc
    environment:
      DATABASE_URL: postgres://${IAM_POSTGRES_USER}:${IAM_POSTGRES_PASSWORD}@mc-iam-manager-db:5432/${IAM_POSTGRES_DB}
      PORT: 5000
    env_file:
      - ./conf/mc-iam-manager/.env
    volumes:
      - ./tool/mcc:/app/tool/mcc
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:5000/readyz"]
      <<: *default-health-check
    
  mc-iam-manager-db:
    container_name: mc-iam-manager-db
    image: postgres:14-alpine
    pull_policy: missing
    platform: linux/amd64
    networks:
      - mc-iam-manager-network
    ports:
      - target: 5432
        published: 5432
        protocol: tcp
    volumes:
      - ./container-volume/mc-iam-manager/postgres/postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${IAM_POSTGRES_DB}
      POSTGRES_USER: ${IAM_POSTGRES_USER}
      POSTGRES_PASSWORD: ${IAM_POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      <<: *default-health-check

  mc-iam-manager-kc:
    container_name: mc-iam-manager-kc
    build:
      context: ./
      dockerfile: ./dockerfiles/Dockerfile.keycloak
    networks:
      - mc-iam-manager-network
    ports:
      - target: 8080
        published: 8080
        protocol: tcp
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://mc-iam-manager-db:5432/${IAM_POSTGRES_DB}
      KC_DB_USERNAME: ${IAM_POSTGRES_USER}
      KC_DB_PASSWORD: ${IAM_POSTGRES_PASSWORD}
      KC_HOSTNAME_PORT: 8080
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./conf/mc-iam-manager/realm-import.json:/opt/keycloak/data/import/realm-import.json
      - ./container-volume/mc-iam-manager/keycloak/data/:/opt/keycloak/data/
    env_file:
      - ./conf/mc-iam-manager/.env
    depends_on:
      - mc-iam-manager-db
    command: 
      - start-dev 
      - --import-realm 
      - --verbose 
      - --features=token-exchange  
      - --https-key-store-file=/opt/keycloak/conf/server.keystore
      - --https-key-store-password=password123
    healthcheck:
      test: ["CMD", "/app/tool/mcc", "rest", "get","http://localhost:8080"]
      <<: *default-health-check

##### MC-COST-OPTIMIZER #########################################################################################################################

  mc-cost-optimizer-fe:
    restart: on-failure
    container_name: mc-cost-optimizer-fe
    image: sehyeong0108/mc-cost-optimizer:fe-20241015
    networks:
      - mc-cost-optimizer-network
      - mc-web-console-network
    ports:
      - target: 80
        published: 7780
        protocol: tcp
    depends_on:
      - mc-cost-optimizer-be
    volumes:
      - ./tool/mcc:/app/tool/mcc
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:80" ]
      <<: *default-health-check
    
  mc-cost-optimizer-be:
    restart: on-failure
    container_name: mc-cost-optimizer-be
    image: sehyeong0108/mc-cost-optimizer:be-20241015
    networks:
      - mc-cost-optimizer-network
      - mc-infra-manager-network
      - mc-web-console-network
    ports:
      - target: 9090
        published: 9090
        protocol: tcp
    depends_on:
      - mc-cost-optimizer-db
    volumes:
      - ./tool/mcc:/app/tool/mcc
    environment:
      spring.datasource.hikari.cost.optimize.jdbc-url: ${CO_COST_DB_URL}
      spring.datasource.hikari.cost.optimize.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.cost.optimize.password: ${CO_MYSQL_PASSWORD}
      tumblebug.url: http://mc-infra-manager:1323
      tumblebug.username: default
      tumblebug.password: default
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get",  "http://localhost:9090/readyz" ]
      <<: *default-health-check
  
  mc-cost-optimizer-cost-collector:
    restart: on-failure
    container_name: mc-cost-optimizer-cost-collector
    image: sehyeong0108/mc-cost-optimizer:cost-collector-20241015
    networks:
      - mc-cost-optimizer-network
    ports:
      - target: 8081
        published: 8081
        protocol: tcp
    depends_on:
      - mc-cost-optimizer-db
    volumes:
      - ./tool/mcc:/app/tool/mcc
    environment:
      spring.datasource.hikari.batch.jdbc-url: ${CO_COST_DB_URL}
      spring.datasource.hikari.batch.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.batch.password: ${CO_MYSQL_PASSWORD}
      unusedBatchCronSchedule: ${CO_COST_COLLECT_UNUSED_CRON_SCHEDULE}
      curBatchCronSchedule: ${CO_COST_COLLECT_CUR_CRON_SCHEDULE}
      aws.data.export.name: ${CO_AWS_CUR_EXPORT_NAME}
      aws.data.export.path.prefix: ${CO_AWS_CUR_EXPORT_PATH_PREFIX}
      AWS_ACCESS_KEY_ID: ${CO_AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${CO_AWS_SECRET_ACCESS_KEY}
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:8081/readyz" ]
      <<: *default-health-check
  
  mc-cost-optimizer-cost-processor:
    restart: on-failure
    container_name: mc-cost-optimizer-cost-processor
    image: sehyeong0108/mc-cost-optimizer:cost-processor-20241015
    networks:
      - mc-cost-optimizer-network
    ports:
      - target: 8082
        published: 18082
        protocol: tcp
    depends_on:
      - mc-cost-optimizer-db
    volumes:
      - ./tool/mcc:/app/tool/mcc
    environment:
      spring.datasource.hikari.batch.jdbc-url: ${CO_COST_DB_URL}
      spring.datasource.hikari.batch.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.batch.password: ${CO_MYSQL_PASSWORD}
      unusedProcessCronSchedule: ${CO_COST_PROCESS_UNUSED_CRON_SCHEDULE}
      abnormalProcessCronSchedule: ${CO_COST_PROCESS_ABNORMAL_CRON_SCHEDULE}
      cost.selector.url: ${CO_COST_SELECTOR_URL}
      opti.alarm.url: ${CO_ALARM_URL}
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:8082/readyz" ]
      <<: *default-health-check
  
  mc-cost-optimizer-cost-selector:
    restart: on-failure
    container_name: mc-cost-optimizer-cost-selector
    image: sehyeong0108/mc-cost-optimizer:cost-selector-20241015
    networks:
      - mc-cost-optimizer-network
    ports:
      - target: 8083
        published: 8083
        protocol: tcp
    depends_on:
      - mc-cost-optimizer-db
    volumes:
      - ./tool/mcc:/app/tool/mcc
    environment:
      spring.datasource.hikari.cost.optimize.jdbc-url: ${CO_COST_DB_URL}
      spring.datasource.hikari.cost.optimize.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.cost.optimize.password: ${CO_MYSQL_PASSWORD}
      opti.alarm.url: ${CO_ALARM_URL}
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:8083/readyz" ]
      <<: *default-health-check
  
  mc-cost-optimizer-alarm-service:
    restart: on-failure
    container_name: mc-cost-optimizer-alarm-service
    image: sehyeong0108/mc-cost-optimizer:alarm-service-20241015
    networks:
      - mc-cost-optimizer-network
    ports:
      - target: 9000
        published: 9000
        protocol: tcp
    depends_on:
      - mc-cost-optimizer-db
    volumes:
      - ./tool/mcc:/app/tool/mcc
    environment:
      spring.datasource.hikari.slack.jdbc-url: ${CO_SLACK_DB_URL}
      spring.datasource.hikari.slack.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.slack.password: ${CO_MYSQL_PASSWORD}
      spring.datasource.hikari.mailing.jdbc-url: ${CO_MAIL_DB_URL}
      spring.datasource.hikari.mailing.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.mailing.password: ${CO_MYSQL_PASSWORD}
      spring.datasource.hikari.history.jdbc-url: ${CO_COST_DB_URL}
      spring.datasource.hikari.history.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.history.password: ${CO_MYSQL_PASSWORD}
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:9000/readyz" ]
      <<: *default-health-check

  mc-cost-optimizer-asset-collector:
    restart: on-failure
    container_name: mc-cost-optimizer-asset-collector
    image: sehyeong0108/mc-cost-optimizer:asset-collector-20241015
    networks:
      - mc-cost-optimizer-network
    ports:
      - target: 8091
        published: 8091
        protocol: tcp
    depends_on:
      - mc-cost-optimizer-db
    volumes:
      - ./tool/mcc:/app/tool/mcc
    environment:
      spring.datasource.hikari.batch.jdbc-url: ${CO_COST_DB_URL}
      spring.datasource.hikari.batch.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.batch.password: ${CO_MYSQL_PASSWORD}
      asset.collect.url: ${CO_ASSET_MONITORING_SERVER}
      assetCollectBatchCronSchedule: ${CO_ASSET_COLLECT_BATCH_CRON_SCHEDULE}
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:8091/readyz" ]
      <<: *default-health-check

  mc-cost-optimizer-db:
    image: mariadb:latest
    container_name: mc-cost-optimizer-db
    environment:
      - ALLOW_EMPTY_PASSWORD=no
      - MYSQL_ROOT_PASSWORD=${CO_MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${CO_MYSQL_USER}
      - MYSQL_PASSWORD=${CO_MYSQL_PASSWORD}
    ports:
      - target: 3306
        published: 3307
        protocol: tcp 
    volumes:
      - ./conf/mc-cost-optimizer/init/:/docker-entrypoint-initdb.d/:ro
      - ./container-volume/mc-cost-optimizer/mysql/:/var/lib/mysql/
    networks:
      - mc-cost-optimizer-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--su-mysql", "--connect", "--innodb_initialized"]
      <<: *default-health-check


##### MC-APPLICATION-MANAGER #########################################################################################################################

  mc-application-manager-jenkins:
    image: jenkins/jenkins:jdk17
    container_name: mc-application-manager-jenkins
    platform: linux/amd64
    networks:
      - mc-application-manager-network
    ports:
      - target: 8080
        published: 9800
        protocol: tcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      - ./container-volume/mc-application-manager/jenkins/:/var/jenkins_home/:rw
    environment:
      - PROJECT=mcmp
    user: root
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/login"]
      <<: *default-health-check

  mc-application-manager-sonatype-nexus:
    image: sonatype/nexus3:latest
    container_name: mc-application-manager-sonatype-nexus
    platform: linux/amd64
    networks:
      - mc-application-manager-network
    ports:
      - target: 8081
        published: 8881
        protocol: tcp
      - target: 5000
        published: 5500
        protocol: tcp
    volumes:
      - ./container-volume/mc-application-manager/nexus/:/nexus-data:rw
    environment:
      - PROJECT=mcmp
    user: root
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      <<: *default-health-check

  mc-application-manager:
    image: cloudbaristaorg/mc-application-manager:edge
    container_name: mc-application-manager
    networks:
      - mc-application-manager-network
      - mc-web-console-network
    ports:
      - target: 18084
        published: 18084
        protocol: tcp
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./container-volume/mc-application-manager/nexus/:/nexus-data:rw
    user: root
    environment:
      - DDL_AUTO=create-drop
      - DB_USER=application
      - DB_PASS=application!23
      - SQL_DATA_INIT=always
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:18084/readyz" ]
      <<: *default-health-check


##### MC-WORKFLOW-MANAGER #########################################################################################################################

  mc-workflow-manager-jenkins:
    image: jenkins/jenkins:jdk17
    container_name: mc-workflow-manager-jenkins
    platform: linux/amd64
    networks:
      - mc-workflow-manager-network
    ports:
      - target: 8080
        published: 9880
        protocol: tcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      - ./container-volume/mc-workflow-manager/jenkins/:/var/jenkins_home/:rw
    environment:
      - PROJECT=mcmp
    user: root
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/login"]
      <<: *default-health-check


  mc-workflow-manager:
    image: cloudbaristaorg/mc-workflow-manager:edge
    container_name: mc-workflow-manager
    platform: linux/amd64
    networks:
      - mc-workflow-manager-network
      - mc-web-console-network
    ports:
      - target: 18083
        published: 18083
        protocol: tcp
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./conf/mc-workflow-manager/document/:/document/
    environment:
      - DB_INIT_YN=create
      - DB_ID=workflow
      - DB_PW=workflow!23
      - SQL_DATA_INIT=always
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:18083/readyz" ]
      <<: *default-health-check


##### MC-DATA-MANAGER #########################################################################################################################

  mc-data-manager-init-volumes:
    image: busybox:stable
    container_name: mc-data-manager-init-volumes
    command: ["sh", "-c", "chown -R ${UID:-0}:${GID:-0} /app/log"]
    volumes:
      - ./container-volume/mc-data-manager/log:/app/log/
    user: root
    env_file:
      - ./conf/mc-data-manager/.env
    init: true
    networks:
      - mc-data-manager-network

  mc-data-manager:
    image: cloudbaristaorg/mc-data-manager:edge
    container_name: mc-data-manager
    depends_on:
      - mc-data-manager-init-volumes
    tty: true
    ports:
      - target: 3300
        published: 3300
        protocol: tcp
    restart: on-failure
    user: root
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./container-volume/mc-data-manager/log:/app/log/
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - ./conf/mc-data-manager/.env
    networks:
      - mc-data-manager-network
      - mc-web-console-network
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:3300/readyz" ]
      <<: *default-health-check


##### MC-WEB-CONSOLE #########################################################################################################################

  mc-web-console-db:
    image: postgres:14-alpine
    container_name: mc-web-console-db
    volumes:
      - ./container-volume/mc-web-console/postgres/postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${CONSOLE_POSTGRES_DB}
      POSTGRES_USER: ${CONSOLE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CONSOLE_POSTGRES_PASSWORD}
    networks:
      - mc-web-console-network
    pull_policy: missing
    platform: linux/amd64
    ports:
      - target: 5432
        published: 15432
        protocol: tcp
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      <<: *default-health-check
    
  mc-web-console-api:
    image: sehyeong0108/mc-web-console-api:20241015
    container_name: mc-web-console-api
    depends_on:
      - mc-web-console-db
      - mc-infra-connector
      - mc-infra-manager
      - mc-iam-manager
      - mc-observability-manager
      - mc-workflow-manager
      - mc-data-manager
      - mc-application-manager
      - mc-cost-optimizer-be
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
    networks:
      - mc-web-console-network
    environment:
      GO_ENV: development
      GODEBUG: netdns=go
      API_ADDR: "0.0.0.0"
      API_PORT: "3000"
      DATABASE_URL: postgres://${CONSOLE_POSTGRES_USER}:${CONSOLE_POSTGRES_PASSWORD}@mc-web-console-db:5432/${CONSOLE_POSTGRES_DB}
      MCIAM_USE: true
      MCIAM_TICKET_USE: false
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./conf/mc-web-console/api/conf/:/conf/
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:3000/readyz" ]
      <<: *default-health-check

  mc-web-console-front:
    image: sehyeong0108/mc-web-console-front:20241015
    container_name: mc-web-console-front
    depends_on:
      - mc-web-console-api
    networks:
      - mc-web-console-network
    ports:
      - target: 3001
        published: 3001
        protocol: tcp
    environment:
      API_ADDR: mc-web-console-api
      API_PORT: 3000
      FRONT_ADDR: 0.0.0.0
      FRONT_PORT: 3001
    volumes:
      - ./tool/mcc:/app/tool/mcc
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:3001" ]
      <<: *default-health-check


##### MC-OBSERVABILITY #########################################################################################################################

  mc-observability-manager:
    image: cloudbaristaorg/mc-observability:edge
    container_name: mc-observability-manager
    ports:
      - target: 18080
        published: 18080
        protocol: tcp
      - target: 18081
        published: 18081
        protocol: tcp
    networks:
      - mc-observability-network
      - mc-infra-manager-network
      - mc-web-console-network
    environment:
      - TUMBLEBUG_URL=http://mc-infra-manager:1323
      - TUMBLEBUG_ID=default
      - TUMBLEBUG_PW=default
      - SPIDER_URL=http://mc-infra-connector:1024
      - DATABASE_HOST=mc-observability-maria
      - INSIGHT_URL=http://mc-observability-insight:9001
      - SPIDER_MONITORING_INFLUXDB_URL="http://mc-observability-influx:8086"
      - AGENT_MANAGER_IP="http://mc-observability-manager:18080"
    env_file:
      - ./conf/mc-observability/manager/.env
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - /var/log/syslog:/var/log/syslog:ro
      - ./container-volume/mc-observability/mc-observability-manager/manager-conf:/etc/mc-observability-agent:rw
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:18080/readyz" ]
      <<: *default-health-check

  mc-observability-maria:
    image: mariadb:10.7.6
    container_name: mc-observability-maria
    ports:
      - target: 3306
        published: 3306
        protocol: tcp 
    volumes:
      - ./conf/mc-observability/mariadb/maria_init.sql:/docker-entrypoint-initdb.d/maria_init.sql
      - ./container-volume/mc-observability/maria/mysql/conf.d:/etc/mysql/conf.d:ro
      - ./container-volume/mc-observability/maria/mysql:/var/lib/mysql
      - ./container-volume/mc-observability/maria/log:/var/log/maria
    environment:
      - TZ="Asia/Seoul"
      - ALLOW_EMPTY_PASSWORD=no
      - MYSQL_ROOT_PASSWORD=qwe1212!Q
      - MYSQL_USER=mc-agent
      - MYSQL_DATABASE=mc_observability
      - MYSQL_PASSWORD=mc-agent
    networks:
      - mc-observability-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--su-mc-agent", "--connect", "--innodb_initialized"]
      <<: *default-health-check

  mc-observability-influx:
    image: influxdb:1.8
    container_name: mc-observability-influx
    ports:
      - target: 8086
        published: 8086
        protocol: tcp 
      - target: 8082
        published: 8082
        protocol: tcp 
    environment:
      - INFLUXDB_USER=mc-agent
      - INFLUXDB_PASSWORD=mc-agent
      - INFLUXDB_DB="mc-observability"
    volumes:
      - ./conf/mc-observability/influxdb/influxdb_init:/docker-entrypoint-initdb.d
      - ./container-volume/mc-observability/influxdb/config:/etc/influxdb
      - ./container-volume/mc-observability/influxdb:/var/lib/influxdb
    networks:
      - mc-observability-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      <<: *default-health-check

  mc-observability-chronograf:
    image: chronograf:1.9.4
    container_name: mc-observability-chronograf
    ports:
      - target: 8888
        published: 8888
        protocol: tcp 
    volumes:
      - ./container-volume/mc-observability/chronograf/chronograf_data:/var/lib/chronograf
    networks:
      - mc-observability-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/chronograf/v1/health"]
      <<: *default-health-check

  mc-observability-kapacitor-init-volumes:
    image: busybox:stable
    container_name: mc-observability-kapacitor-init-volumes
    command: ["sh", "-c", "chown -R 999:999 /var/lib/kapacitor"]
    volumes:
      - ./container-volume/mc-observability/kapacitor:/var/lib/kapacitor
    user: root
    init: true
    networks:
      - mc-observability-network

  mc-observability-kapacitor:
    image: kapacitor:1.7.5
    container_name: mc-observability-kapacitor
    ports:
      - target: 9092
        published: 9092
        protocol: tcp
    environment:
      - KAPACITOR_INFLUXDB_0_URLS_0=http://mc-observability-influx:8086
    volumes:
      - ./container-volume/mc-observability/kapacitor:/var/lib/kapacitor
    networks:
      - mc-observability-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9092/kapacitor/v1/ping"]
      <<: *default-health-check

  mc-observability-opensearch-init-volumes:
    image: busybox:stable
    container_name: mc-observability-opensearch-init-volumes
    command: ["sh", "-c", "chown -R 1000:1000 /usr/share/opensearch/data"]
    volumes:
      - ./container-volume/mc-observability/opensearch:/usr/share/opensearch/data
    user: root
    init: true
    networks:
      - mc-observability-network

  opensearch-node1:
    image: opensearchproject/opensearch:1.3.19
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node1
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
      - "discovery.type=single-node"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ./container-volume/mc-observability/opensearch:/usr/share/opensearch/data
    ports:
      - target: 9200
        published: 9200
        protocol: tcp
      - target: 9600
        published: 9600
        protocol: tcp
    networks:
      - mc-observability-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      <<: *default-health-check

  mc-observability-opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:1.3.19
    container_name: mc-observability-opensearch-dashboards
    ports:
      - target: 5601
        published: 5601
        protocol: tcp
    environment:
      - 'OPENSEARCH_HOSTS=["http://opensearch-node1:9200"]'
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
    networks:
      - mc-observability-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      <<: *default-health-check

  mc-observability-insight:
    image: sehyeong0108/mc-observability-insight:20241015
    container_name: mc-observability-insight
    ports:
      - target: 9001
        published: 9001
        protocol: tcp
    environment:
      - TZ=Asia/Seoul
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - ./container-volume/mc-observability/insight/log:/mc-insight/log
    networks:
      - mc-observability-network
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:9001/readyz" ]
      <<: *default-health-check

  mc-observability-insight-scheduler:
    image: sehyeong0108/mc-observability-scheduler:20241015
    container_name: mc-observability-insight-scheduler
    ports:
      - target: 9002
        published: 9002
        protocol: tcp
    environment:
      - TZ=Asia/Seoul
    networks:
      - mc-observability-network
    user: "1000:1000"
    volumes:
      - ./tool/mcc:/app/tool/mcc
      - /etc/localtime:/etc/localtime:ro
      - ./conf/mc-observability/scheduler/airflow-home:/usr/local/airflow
      - ./container-volume/mc-observability/scheduler/logs:/usr/local/airflow/logs
    command: >
      /bin/bash -c "
        # Wait for MySQL
        sleep 10

        # Clean up pid
        rm -f airflow-webserver.pid

        # Set up metadata database
        airflow db migrate

        # Create default user
        airflow users create --username admin --password admin --email admin@test.com --firstname admin --lastname admin --role Admin

        # Import variables & Make connections
        # airflow variables import -a overwrite /usr/local/airflow/airflow_variables.json
        airflow variables set --description 'O11Y Manger API BASE URL' API_BASE_URL http://mc-observability-manager:18080/api/o11y

        airflow connections add --conn-type http --conn-host mc-observability-insight --conn-schema http --conn-port 9001 api_base_url
        airflow connections add --conn-type mysql --conn-host mc-observability-maria --conn-schema mc_observability --conn-login mc-agent --conn-password mc-agent --conn-port 3306 mcmp_db
        airflow connections add --conn-type http --conn-host mc-observability-manager --conn-port 18080 o11y-manager
        airflow connections add --conn-type influxdb --conn-host mc-observability-influx --conn-port 8086 --conn-schema downsampling --conn-login mc-agent --conn-password mc-agent influxdb

        # Reload & Run dags
        airflow dags reserialize
        airflow dags unpause anomaly_detection
        airflow dags unpause down_sampling

        # Start airflow
        airflow scheduler & airflow webserver -p 9002

        # Keep the server on no matter what
        sleep infinity
            "
    healthcheck:
      test: [ "CMD", "/app/tool/mcc", "rest", "get", "http://localhost:9002/readyz" ]
      <<: *default-health-check




