networks:
  mc-infra-connector-network:
  mc-infra-manager-network:
  mc-iam-manager-network:
  mc-cost-optimizer-network:
  mc-application-manager-network:

services:
  mc-infra-connector:
    image: cloudbaristaorg/cb-spider:0.9.0
    pull_policy: missing
    container_name: mc-infra-connector
    platform: linux/amd64
    networks:
      - mc-infra-connector-network
    ports:
      - target: 1024
        published: 1024
        protocol: tcp
    volumes:
      - ./conf/mc-infra-connector/:/root/go/src/github.com/cloud-barista/cb-spider/conf/:ro
      - ./container-volume/mc-infra-connector/meta_db/:/root/go/src/github.com/cloud-barista/cb-spider/meta_db/
      - ./container-volume/mc-infra-connector/log/:/root/go/src/github.com/cloud-barista/cb-spider/log/
    environment:
      - PLUGIN_SW=OFF
      # - SERVER_ADDRESS=localhost
      # if you leave these values empty, REST Auth will be disabled.
      # - API_USERNAME=
      # - API_PASSWORD=
      - SPIDER_LOG_LEVEL=error
      - SPIDER_HISCALL_LOG_LEVEL=error
      # - ID_TRANSFORM_MODE=ON

  mc-infra-manager:
    image: cloudbaristaorg/cb-tumblebug:0.9.4
    container_name: mc-infra-manager
    pull_policy: missing
    platform: linux/amd64
    networks:
      - mc-infra-connector-network
      - mc-infra-manager-network
    ports:
      - target: 1323
        published: 1323
        protocol: tcp
    depends_on: 
      - mc-infra-manager-etcd
      - mc-infra-connector
    volumes:
      - ./conf/mc-infra-manager/:/app/conf/:ro
      - ./container-volume/mc-infra-manager/meta_db/:/app/meta_db/
      - ./container-volume/mc-infra-manager/log/:/app/log/
    environment:
      # - TB_ROOT_PATH=/app
      - TB_SPIDER_REST_URL=http://mc-infra-connector:1024/spider
      - TB_ETCD_ENDPOINTS=http://mc-infra-manager-etcd:2379
      # - TB_ETCD_AUTH_ENABLED=true
      # - TB_ETCD_USERNAME=default
      # - TB_ETCD_PASSWORD=default
      # - TB_SQLITE_URL=localhost:3306 
      # - TB_SQLITE_DATABASE=cb_tumblebug 
      # - TB_SQLITE_USER=cb_tumblebug 
      # - TB_SQLITE_PASSWORD=cb_tumblebug 
      # - TB_ALLOW_ORIGINS=*
      # - TB_AUTH_ENABLED=true
      # - TB_API_USERNAME=default
      # - TB_API_PASSWORD=default
      # - TB_AUTOCONTROL_DURATION_MS=10000
      # - TB_SELF_ENDPOINT=localhost:1323
      # - TB_DRAGONFLY_REST_URL=http://cb-dragonfly:9090/dragonfly
      # - TB_DEFAULT_NAMESPACE=ns01
      # - TB_DEFAULT_CREDENTIALHOLDER=admin
      # - TB_LOGFILE_PATH=/app/log/tumblebug.log
      # - TB_LOGFILE_MAXSIZE=10
      # - TB_LOGFILE_MAXBACKUPS=3
      # - TB_LOGFILE_MAXAGE=30
      # - TB_LOGFILE_COMPRESS=false
      # - TB_LOGLEVEL=debug
      # - TB_LOGWRITER=both
      # - TB_NODE_ENV=development

  mc-infra-manager-etcd:
    image: gcr.io/etcd-development/etcd:v3.5.14
    container_name: mc-infra-manager-etcd
    networks:
      - mc-infra-manager-network
    ports:
      - target: 2379
        published: 2379
        protocol: tcp
      - target: 2380
        published: 2380
        protocol: tcp
    volumes: 
      - ./container-volume/mc-infra-manager/etcd/data:/etcd-data
    entrypoint: /usr/local/bin/etcd
    command:
      - --name
      - s1
      - --data-dir
      - /etcd-data
      - --listen-client-urls
      - http://0.0.0.0:2379
      - --advertise-client-urls
      - http://0.0.0.0:2379
      - --listen-peer-urls
      - http://0.0.0.0:2380
      - --initial-advertise-peer-urls
      - http://0.0.0.0:2380
      - --initial-cluster
      - s1=http://0.0.0.0:2380
      - --initial-cluster-token
      - tkn
      - --initial-cluster-state
      - new
      - --log-level
      - info
      - --logger
      - zap
      - --log-outputs
      - stderr
      - --auth-token
      - simple
    healthcheck:
      test: [ "CMD", "etcdctl", "endpoint", "health", "--endpoints=http://localhost:2379"]
      interval: 1m
      timeout: 5s
      retries: 3
      start_period: 10s

  mc-iam-manager:
    container_name: mc-iam-manager
    image: sehyeong0108/mc-iam-manager:v0.2.8
    pull_policy: missing
    platform: linux/amd64
    networks:
      - mc-iam-manager-network
      - mc-infra-manager-network
    ports:
      - target: 5000
        published: 5000
        protocol: tcp
    depends_on:
      - mc-iam-manager-db
      - mc-iam-manager-kc
    environment:
      GO_ENV: development # production | development
      GODEBUG: netdns=go
      DEV_DATABASE_URL: postgres://${IAM_POSTGRES_USER}:${IAM_POSTGRES_PASSWORD}@mc-iam-manager-db:5432/${IAM_POSTGRES_DB}
      DATABASE_URL: postgres://${IAM_POSTGRES_USER}:${IAM_POSTGRES_PASSWORD}@mc-iam-manager-db:5432/${IAM_POSTGRES_DB}
      PORT: 5000
    env_file:
      - ./conf/mc-iam-manager/.env

  mc-iam-manager-db:
    container_name: mc-iam-manager-db
    image: postgres:14-alpine
    pull_policy: missing
    platform: linux/amd64
    networks:
      - mc-iam-manager-network
    ports:
      - target: 5432
        published: 5432
        protocol: tcp
    volumes:
      - ./container-volume/mc-iam-manager/postgres/postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${IAM_POSTGRES_DB}
      POSTGRES_USER: ${IAM_POSTGRES_USER}
      POSTGRES_PASSWORD: ${IAM_POSTGRES_PASSWORD}

  mc-iam-manager-kc:
    container_name: mc-iam-manager-kc
    build:
      context: ./
      dockerfile: ./dockerfiles/Dockerfile.keycloak
    networks:
      - mc-iam-manager-network
    ports:
      - target: 8080
        published: 8080
        protocol: tcp
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://mc-iam-manager-db:5432/${IAM_POSTGRES_DB}
      KC_DB_USERNAME: ${IAM_POSTGRES_USER}
      KC_DB_PASSWORD: ${IAM_POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
    volumes:
      - ./conf/mc-iam-manager/realm-import.json:/opt/keycloak/data/import/realm-import.json
      - ./container-volume/mc-iam-manager/keycloak/data/:/opt/keycloak/data/
    env_file:
      - ./conf/mc-iam-manager/.env
    depends_on:
      - mc-iam-manager-db
    command: 
      - start-dev 
      - --import-realm 
      - --verbose 
      - --features=token-exchange  
      - --https-key-store-file=/opt/keycloak/conf/server.keystore
      - --https-key-store-password=password123

  mc-cost-optimizer-fe:
    restart: always
    container_name: mc-cost-optimizer-fe
    image: sehyeong0108/mc-cost-optimizer:fe-v0.2.0
    networks:
      - mc-cost-optimizer-network
    ports:
      - target: 80
        published: 7780
        protocol: tcp

  mc-cost-optimizer-be:
    restart: always
    container_name: mc-cost-optimizer-be
    image: sehyeong0108/mc-cost-optimizer:be-v0.2.0
    networks:
      - mc-cost-optimizer-network
    ports:
      - target: 9090
        published: 9090
        protocol: tcp
    environment:
      spring.datasource.hikari.cost.optimize.jdbc-url: ${CO_COST_DB_URL}
      spring.datasource.hikari.cost.optimize.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.cost.optimize.password: ${CO_MYSQL_PASSWORD}
  
  mc-cost-optimizer-cost-collector:
    restart: always
    container_name: mc-cost-optimizer-cost-collector
    image: sehyeong0108/mc-cost-optimizer:cost-collector-v0.2.0
    networks:
      - mc-cost-optimizer-network
    ports:
      - target: 8081
        published: 8081
        protocol: tcp
    environment:
      spring.datasource.hikari.batch.jdbc-url: ${CO_COST_DB_URL}
      spring.datasource.hikari.batch.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.batch.password: ${CO_MYSQL_PASSWORD}
      unusedBatchCronSchedule: ${CO_COST_COLLECT_CRON_SCHEDULE}
  
  mc-cost-optimizer-cost-processor:
    restart: always
    container_name: mc-cost-optimizer-cost-processor
    image: sehyeong0108/mc-cost-optimizer:cost-processor-v0.2.0
    networks:
      - mc-cost-optimizer-network
    ports:
      - target: 8082
        published: 8082
        protocol: tcp
    environment:
      spring.datasource.hikari.batch.jdbc-url: ${CO_COST_DB_URL}
      spring.datasource.hikari.batch.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.batch.password: ${CO_MYSQL_PASSWORD}
      unusedProcessCronSchedule: ${CO_COST_PROCESS_CRON_SCHEDULE}
      cost.selector.url: ${CO_COST_SELECTOR_URL}
  
  mc-cost-optimizer-cost-selector:
    restart: always
    container_name: mc-cost-optimizer-cost-selector
    image: sehyeong0108/mc-cost-optimizer:cost-selector-v0.2.0
    networks:
      - mc-cost-optimizer-network
    ports:
      - target: 8083
        published: 8083
        protocol: tcp
    environment:
      spring.datasource.hikari.cost.optimize.jdbc-url: ${CO_COST_DB_URL}
      spring.datasource.hikari.cost.optimize.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.cost.optimize.password: ${CO_MYSQL_PASSWORD}
  
  mc-cost-optimizer-alarm-service:
    restart: always
    container_name: mc-cost-optimizer-alarm-service
    image: sehyeong0108/mc-cost-optimizer:alarm-service-v0.2.0
    networks:
      - mc-cost-optimizer-network
    ports:
      - target: 9000
        published: 9000
        protocol: tcp
    environment:
      spring.datasource.hikari.slack.jdbc-url: ${CO_SLACK_DB_URL}
      spring.datasource.hikari.slack.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.slack.password: ${CO_MYSQL_PASSWORD}
      spring.datasource.hikari.mailing.jdbc-url: ${CO_MAIL_DB_URL}
      spring.datasource.hikari.mailing.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.mailing.password: ${CO_MYSQL_PASSWORD}
      spring.datasource.hikari.history.jdbc-url: ${CO_COST_DB_URL}
      spring.datasource.hikari.history.username: ${CO_MYSQL_USER}
      spring.datasource.hikari.history.password: ${CO_MYSQL_PASSWORD}

  mc-cost-optimizer-db:
    image: mariadb:latest
    container_name: mc-cost-optimizer-db
    environment:
      - MYSQL_ROOT_PASSWORD=${CO_MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${CO_MYSQL_USER}
      - MYSQL_PASSWORD=${CO_MYSQL_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - ./conf/mc-cost-optimizer/init/:/docker-entrypoint-initdb.d/:ro
      - ./container-volume/mc-cost-optimizer/mysql/:/var/lib/mysql/
    networks:
      - mc-cost-optimizer-network

  mc-application-manager-jenkins:
    image: jenkins/jenkins:jdk17
    container_name: mc-application-manager-jenkins
    platform: linux/amd64
    networks:
      - mc-application-manager-network
    ports:
      - target: 8080
        published: 9800
        protocol: tcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      - ./container-volume/mc-application-manager/jenkins/:/var/jenkins_home/:rw
    environment:
      - PROJECT=mcmp
    user: root
    healthcheck: 
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 1m
      timeout: 5s
      retries: 3
      start_period: 10s


  mc-application-manager-sonatype-nexus:
    image: sonatype/nexus3:latest
    container_name: mc-application-manager-sonatype-nexus
    platform: linux/amd64
    networks:
      - mc-application-manager-network
    ports:
      - target: 8081
        published: 8881
        protocol: tcp
      - target: 5000
        published: 5005
        protocol: tcp
    volumes:
      - ./container-volume/mc-application-manager/nexus/:/nexus-data:rw
    environment:
      - PROJECT=mcmp
    user: root
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081" ]
      interval: 1m
      timeout: 5s
      retries: 3
      start_period: 10s

  mc-application-manager:
    image: cloudbaristaorg/mc-application-manager:edge
    container_name: mc-application-manager
    networks:
      - mc-application-manager-network
    ports:
      - target: 18084
        published: 18084
        protocol: tcp
    volumes:
    - ./container-volume/mc-application-manager/nexus/:/nexus-data:rw
    user: root
    environment:
      - DDL_AUTO=create-drop
      - DB_USER=application
      - DB_PASS=application!23
      - SQL_DATA_INIT=always
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "1324"]
      interval: 1m
      timeout: 5s
      retries: 3
      start_period: 10s