cliSpecVersion: v1
# Service Definitions (Framework Server Basic informations)
services:
  mc-infra-connector: #service name
    baseurl: http://localhost:1024/spider  # baseurl is Scheme + Host + Base Path
    auth: #If you need an authentication method, describe the type and username and password in the sub
      type: basic
      username: default
      password: default
  
  mc-infra-manager:
    baseurl: http://localhost:1323/tumblebug
    auth:
      type: basic
      username: default
      password: default

  mc-iam-manager:
    baseurl: http://localhost:4000
    auth:
      type: bearer
  
  sample:
    baseurl: http://localhost:1323/test
    auth: #none


# Define rest api actions for each of the services defined above.
# specify the DATA to use for the API in the CLI.
serviceActions:

  # 240826 updated : https://raw.githubusercontent.com/cloud-barista/cb-tumblebug/main/src/api/rest/docs/swagger.json
  mc-infra-manager:
    PostInstallBenchmarkAgentToMci:
      method: post
      resourcePath: /ns/{nsId}/installBenchmarkAgent/mci/{mciId}
      description: "Install the benchmark agent to specified MCI"
    GetReadyz:
      method: get
      resourcePath: /readyz
      description: "Check Tumblebug is ready"
    FetchImages:
      method: post
      resourcePath: /ns/{nsId}/resources/fetchImages
      description: "Fetch images"
    GetConnConfigList:
      method: get
      resourcePath: /connConfig
      description: "List all registered ConnConfig"
    GetAllNs:
      method: get
      resourcePath: /ns
      description: "List all namespaces or namespaces' ID"
    PostNs:
      method: post
      resourcePath: /ns
      description: "Create namespace"
    DelAllNs:
      method: delete
      resourcePath: /ns
      description: "Delete all namespaces"
    GetMciGroupIds:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/subgroup
      description: "List SubGroup IDs in a specified MCI"
    GetAllRequests:
      method: get
      resourcePath: /requests
      description: "Get details of all requests with optional filters."
    DeleteAllRequests:
      method: delete
      resourcePath: /requests
      description: "Delete details of all requests"
    InspectResources:
      method: post
      resourcePath: /inspectResources
      description: "Inspect Resources (vNet, securityGroup, sshKey, vm) registered in CB-Tumblebug, CB-Spider, CSP"
    GetSshKey:
      method: get
      resourcePath: /ns/{nsId}/resources/sshKey/{sshKeyId}
      description: "Get SSH Key"
    PutSshKey:
      method: put
      resourcePath: /ns/{nsId}/resources/sshKey/{sshKeyId}
      description: "Update SSH Key"
    DelSshKey:
      method: delete
      resourcePath: /ns/{nsId}/resources/sshKey/{sshKeyId}
      description: "Delete SSH Key"
    DelSubnet:
      method: delete
      resourcePath: /ns/{nsId}/resources/vNet/{vNetId}/subnet/{subnetId}
      description: "Delete Subnet"
    RegisterCredential:
      method: post
      resourcePath: /credential
      description: "This API registers credential information using hybrid encryption. The process involves compressing and encrypting sensitive data with AES-256, encrypting the AES key with a 4096-bit RSA public key (retrieved via `GET /credential/publicKey`), and using OAEP padding with SHA-256. All values, including the AES key, must be base64 encoded before sending, and the public key token ID must be included in the request."
    GetAllCustomImage:
      method: get
      resourcePath: /ns/{nsId}/resources/customImage
      description: "List all customImages or customImages' ID"
    PostCustomImage:
      method: post
      resourcePath: /ns/{nsId}/resources/customImage
      description: "Register existing Custom Image in a CSP (option=register)"
    DelAllCustomImage:
      method: delete
      resourcePath: /ns/{nsId}/resources/customImage
      description: "Delete all customImages"
    DeleteK8sNodeGroup:
      method: delete
      resourcePath: /ns/{nsId}/k8scluster/{k8sClusterId}/k8snodegroup/{k8sNodeGroupName}
      description: "Remove a K8sNodeGroup"
    GetNLB:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb/{nlbId}
      description: "Get NLB"
    DelNLB:
      method: delete
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb/{nlbId}
      description: "Delete NLB"
    GetSpec:
      method: get
      resourcePath: /ns/{nsId}/resources/spec/{specId}
      description: "Get spec"
    PutSpec:
      method: put
      resourcePath: /ns/{nsId}/resources/spec/{specId}
      description: "Update spec"
    DelSpec:
      method: delete
      resourcePath: /ns/{nsId}/resources/spec/{specId}
      description: "Delete spec"
    InspectResourcesOverview:
      method: get
      resourcePath: /inspectResourcesOverview
      description: "Inspect Resources Overview (vNet, securityGroup, sshKey, vm) registered in CB-Tumblebug and CSP for all connections"
    GetAllBenchmark:
      method: post
      resourcePath: /ns/{nsId}/benchmarkAll/mci/{mciId}
      description: "Run MCI benchmark for all performance metrics and return results"
    GetLatencyBenchmark:
      method: get
      resourcePath: /ns/{nsId}/benchmarkLatency/mci/{mciId}
      description: "Run MCI benchmark for network latency"
    GetControlMci:
      method: get
      resourcePath: /ns/{nsId}/control/mci/{mciId}
      description: "Control the lifecycle of MCI (refine, suspend, resume, reboot, terminate)"
    GetMci:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}
      description: "Get MCI object (option: status, accessInfo, vmId)"
    DelMci:
      method: delete
      resourcePath: /ns/{nsId}/mci/{mciId}
      description: "Delete MCI"
    GetConfig:
      method: get
      resourcePath: /config/{configId}
      description: "Get config"
    InitConfig:
      method: delete
      resourcePath: /config/{configId}
      description: "Init config"
    LoadCommonResource:
      method: get
      resourcePath: /loadCommonResource
      description: "Load Common Resources from internal asset files (Spec, Image)"
    GetSecurityGroup:
      method: get
      resourcePath: /ns/{nsId}/resources/securityGroup/{securityGroupId}
      description: "Get Security Group"
    DelSecurityGroup:
      method: delete
      resourcePath: /ns/{nsId}/resources/securityGroup/{securityGroupId}
      description: "Delete Security Group"
    DelAllSharedResources:
      method: delete
      resourcePath: /ns/{nsId}/sharedResources
      description: "Delete all Default Resource Objects in the given namespace"
    GetAvailableK8sClusterNodeImage:
      method: get
      resourcePath: /availableK8sClusterNodeImage
      description: "Get available kubernetes cluster node image"
    GetNs:
      method: get
      resourcePath: /ns/{nsId}
      description: "Get namespace"
    PutNs:
      method: put
      resourcePath: /ns/{nsId}
      description: "Update namespace"
    DelNs:
      method: delete
      resourcePath: /ns/{nsId}
      description: "Delete namespace"
    FilterSpecsByRange:
      method: post
      resourcePath: /ns/{nsId}/resources/filterSpecsByRange
      description: "Filter specs by range"
    RegisterCspNativeResourcesAll:
      method: post
      resourcePath: /registerCspResourcesAll
      description: "Register CSP Native Resources (vNet, securityGroup, sshKey, vm) from all Clouds to CB-Tumblebug"
    PostMcNLB:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/mcSwNlb
      description: "Create a special purpose MCI for NLB and depoly and setting SW NLB"
    PostInstallMonitorAgentToMci:
      method: post
      resourcePath: /ns/{nsId}/monitoring/install/mci/{mciId}
      description: "Install monitoring agent (CB-Dragonfly agent) to MCI"
    PostFirewallRules:
      method: post
      resourcePath: /ns/{nsId}/resources/securityGroup/{securityGroupId}/rules
      description: "Create FirewallRules"
    DelFirewallRules:
      method: delete
      resourcePath: /ns/{nsId}/resources/securityGroup/{securityGroupId}/rules
      description: "Delete FirewallRules"
    GetVNet:
      method: get
      resourcePath: /ns/{nsId}/resources/vNet/{vNetId}
      description: "Get VNet"
    DelVNet:
      method: delete
      resourcePath: /ns/{nsId}/resources/vNet/{vNetId}
      description: "Delete VNet"
    GetRegionList:
      method: get
      resourcePath: /region
      description: "List all registered regions"
    GetMciGroupVms:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/subgroup/{subgroupId}
      description: "List VMs with a SubGroup label in a specified MCI"
    PostMciSubGroupScaleOut:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/subgroup/{subgroupId}
      description: "ScaleOut subGroup in specified MCI"
    TestJWTAuth:
      method: get
      resourcePath: /auth/test
      description: "Test JWT authentication"
    GetK8sCluster:
      method: get
      resourcePath: /ns/{nsId}/k8scluster/{k8sClusterId}
      description: "Get K8sCluster"
    DeleteK8sCluster:
      method: delete
      resourcePath: /ns/{nsId}/k8scluster/{k8sClusterId}
      description: "Delete K8sCluster"
    GetAllMciPolicy:
      method: get
      resourcePath: /ns/{nsId}/policy/mci
      description: "List all MCI policies"
    DelAllMciPolicy:
      method: delete
      resourcePath: /ns/{nsId}/policy/mci
      description: "Delete all MCI policies"
    CheckHTTPVersion:
      method: get
      resourcePath: /httpVersion
      description: "Checks and logs the HTTP version of the incoming request to the server console."
    GetControlMciVm:
      method: get
      resourcePath: /ns/{nsId}/control/mci/{mciId}/vm/{vmId}
      description: "Control the lifecycle of VM (suspend, resume, reboot, terminate)"
    GetImage:
      method: get
      resourcePath: /ns/{nsId}/resources/image/{imageId}
      description: "Get image"
    PutImage:
      method: put
      resourcePath: /ns/{nsId}/resources/image/{imageId}
      description: "Update image"
    DelImage:
      method: delete
      resourcePath: /ns/{nsId}/resources/image/{imageId}
      description: "Delete image"
    CheckNodeGroupsOnK8sCreation:
      method: get
      resourcePath: /checkNodeGroupsOnK8sCreation
      description: "Check whether nodegroups are required during the k8scluster creation"
    GetAllDataDisk:
      method: get
      resourcePath: /ns/{nsId}/resources/dataDisk
      description: "List all Data Disks or Data Disks' ID"
    PostDataDisk:
      method: post
      resourcePath: /ns/{nsId}/resources/dataDisk
      description: "Create Data Disk"
    DelAllDataDisk:
      method: delete
      resourcePath: /ns/{nsId}/resources/dataDisk
      description: "Delete all Data Disks"
    PostImage:
      method: post
      resourcePath: /ns/{nsId}/resources/image
      description: "Register image"
    DelAllImage:
      method: delete
      resourcePath: /ns/{nsId}/resources/image
      description: "Delete all images"
    GetAllImage:
      method: get
      resourcePath: /ns/{nsId}/resources/image
      description: "List all images or images' ID"
    GetDataDisk:
      method: get
      resourcePath: /ns/{nsId}/resources/dataDisk/{dataDiskId}
      description: "Get Data Disk"
    PutDataDisk:
      method: put
      resourcePath: /ns/{nsId}/resources/dataDisk/{dataDiskId}
      description: "Upsize Data Disk"
    DelDataDisk:
      method: delete
      resourcePath: /ns/{nsId}/resources/dataDisk/{dataDiskId}
      description: "Delete Data Disk"
    LookupSpec:
      method: post
      resourcePath: /lookupSpec
      description: "Lookup spec"
    PostK8sNodeGroup:
      method: post
      resourcePath: /ns/{nsId}/k8scluster/{k8sClusterId}/k8snodegroup
      description: "Add a K8sNodeGroup"
    PutUpgradeK8sCluster:
      method: put
      resourcePath: /ns/{nsId}/k8scluster/{k8sClusterId}/upgrade
      description: "Upgrade a K8sCluster's version"
    AddNLBVMs:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb/{nlbId}/vm
      description: "Add VMs to NLB"
    RemoveNLBVMs:
      method: delete
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb/{nlbId}/vm
      description: "Delete VMs from NLB"
    PostMciVm:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/vm
      description: "Create and add homogeneous VMs(subGroup) to a specified MCI (Set subGroupSize for multiple VMs)"
    PostMciDynamic:
      method: post
      resourcePath: /ns/{nsId}/mciDynamic
      description: "Create MCI Dynamically from common spec and image"
    GetSiteToSiteVpn:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/vpn/{vpnId}
      description: "Get resource info of a site-to-site VPN (Currently, GCP-AWS is supported)"
    PostSubnet:
      method: post
      resourcePath: /ns/{nsId}/resources/vNet/{vNetId}/subnet
      description: "Create Subnet"
    GetAllMci:
      method: get
      resourcePath: /ns/{nsId}/mci
      description: "List all MCIs or MCIs' ID"
    PostMci:
      method: post
      resourcePath: /ns/{nsId}/mci
      description: "Create MCI"
    DelAllMci:
      method: delete
      resourcePath: /ns/{nsId}/mci
      description: "Delete all MCIs"
    SetBastionNodes:
      method: put
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{targetVmId}/bastion/{bastionVmId}
      description: "Set bastion nodes for a VM"
    GetMciVm:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{vmId}
      description: "Get VM in specified MCI"
    DelMciVm:
      method: delete
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{vmId}
      description: "Delete VM in specified MCI"
    RecommendVm:
      method: post
      resourcePath: /mciRecommendVm
      description: "Recommend MCI plan (filter and priority) Find details from https://github.com/cloud-barista/cb-tumblebug/discussions/1234"
    GetConnConfig:
      method: get
      resourcePath: /connConfig/{connConfigName}
      description: "Get registered ConnConfig info"
    GetPublicKeyForCredentialEncryption:
      method: get
      resourcePath: /credential/publicKey
      description: "Generates an RSA key pair using a 4096-bit key size with the RSA algorithm. The public key is generated using the RSA algorithm with OAEP padding and SHA-256 as the hash function. This key is used to encrypt an AES key that will be used for hybrid encryption of credentials."
    ForwardAnyReqToAny:
      method: post
      resourcePath: /forward/{path}
      description: "Forward any (GET) request to CB-Spider"
    GetAllSshKey:
      method: get
      resourcePath: /ns/{nsId}/resources/sshKey
      description: "List all SSH Keys or SSH Keys' ID"
    PostSshKey:
      method: post
      resourcePath: /ns/{nsId}/resources/sshKey
      description: "Create SSH Key"
    DelAllSshKey:
      method: delete
      resourcePath: /ns/{nsId}/resources/sshKey
      description: "Delete all SSH Keys"
    GetProviderList:
      method: get
      resourcePath: /provider
      description: "List all registered Providers"
    GetK8sClusterInfo:
      method: get
      resourcePath: /k8sClusterInfo
      description: "Get kubernetes cluster information"
    GetAllNLB:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb
      description: "List all NLBs or NLBs' ID"
    PostNLB:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb
      description: "Create NLB"
    DelAllNLB:
      method: delete
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb
      description: "Delete all NLBs"
    PostSpec:
      method: post
      resourcePath: /ns/{nsId}/resources/spec
      description: "Register spec"
    GetAllVNet:
      method: get
      resourcePath: /ns/{nsId}/resources/vNet
      description: "List all VNets or VNets' ID"
    PostVNet:
      method: post
      resourcePath: /ns/{nsId}/resources/vNet
      description: "Create VNet"
    DelAllVNet:
      method: delete
      resourcePath: /ns/{nsId}/resources/vNet
      description: "Delete all VNets"
    PostSiteToSiteVpn:
      method: post
      resourcePath: /stream-response/ns/{nsId}/mci/{mciId}/vpn/{vpnId}
      description: "Create a site-to-site VPN (Currently, GCP-AWS is supported)"
    DeleteSiteToSiteVpn:
      method: delete
      resourcePath: /stream-response/ns/{nsId}/mci/{mciId}/vpn/{vpnId}
      description: "Delete a site-to-site VPN (Currently, GCP-AWS is supported)"
    PutSiteToSiteVpn:
      method: put
      resourcePath: /stream-response/ns/{nsId}/mci/{mciId}/vpn/{vpnId}
      description: "(To be provided) Update a site-to-site VPN"
    GetNLBHealth:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/nlb/{nlbId}/healthz
      description: "Get NLB Health"
    GetBastionNodes:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{targetVmId}/bastion
      description: "Get bastion nodes for a VM"
    PutMonitorAgentStatusInstalled:
      method: put
      resourcePath: /ns/{nsId}/monitoring/status/mci/{mciId}/vm/{vmId}
      description: "Set monitoring agent (CB-Dragonfly agent) installation status installed (for Windows VM only)"
    PostUtilToValidateNetwork:
      method: post
      resourcePath: /util/net/validate
      description: "Validate a hierarchical configuration of a VPC network or multi-cloud network consisting of multiple VPC networks"
    GetAllK8sCluster:
      method: get
      resourcePath: /ns/{nsId}/k8scluster
      description: "List all K8sClusters or K8sClusters' ID"
    PostK8sCluster:
      method: post
      resourcePath: /ns/{nsId}/k8scluster
      description: "Create K8sCluster<br>Find details from https://github.com/cloud-barista/cb-tumblebug/discussions/1614"
    DeleteAllK8sCluster:
      method: delete
      resourcePath: /ns/{nsId}/k8scluster
      description: "Delete all K8sClusters"
    GetVmDataDisk:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{vmId}/dataDisk
      description: "Get available dataDisks for a VM"
    PutVmDataDisk:
      method: put
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{vmId}/dataDisk
      description: "Attach/Detach available dataDisk"
    PostVmDataDisk:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{vmId}/dataDisk
      description: "Provisioning (Create and attach) dataDisk"
    RegisterCspNativeResources:
      method: post
      resourcePath: /registerCspResources
      description: "Register CSP Native Resources (vNet, securityGroup, sshKey, vm) to CB-Tumblebug"
    LookupImage:
      method: post
      resourcePath: /lookupImage
      description: "Lookup image"
    CheckResource:
      method: get
      resourcePath: /ns/{nsId}/checkResource/{resourceType}/{resourceId}
      description: "Check resources' existence"
    LoadSharedResource:
      method: get
      resourcePath: /ns/{nsId}/loadSharedResource
      description: "Load Default Resource from internal asset file"
    GetCustomImage:
      method: get
      resourcePath: /ns/{nsId}/resources/customImage/{customImageId}
      description: "Get customImage"
    DelCustomImage:
      method: delete
      resourcePath: /ns/{nsId}/resources/customImage/{customImageId}
      description: "Delete customImage"
    GetBenchmark:
      method: post
      resourcePath: /ns/{nsId}/benchmark/mci/{mciId}
      description: "Run MCI benchmark for a single performance metric and return results"
    GetRequestStatusOfSiteToSiteVpn:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/vpn/{vpnId}/request/{requestId}
      description: "Check the status of a specific request by its ID"
    FetchSpecs:
      method: post
      resourcePath: /ns/{nsId}/resources/fetchSpecs
      description: "Fetch specs"
    PostMciDynamicCheckRequest:
      method: post
      resourcePath: /mciDynamicCheckRequest
      description: "Check available ConnectionConfig list before create MCI Dynamically from common spec and image"
    GetSitesInMci:
      method: get
      resourcePath: /ns/{nsId}/mci/{mciId}/site
      description: "Get sites in MCI"
    GetRequest:
      method: get
      resourcePath: /request/{reqId}
      description: "Get details of a specific request"
    DeleteRequest:
      method: delete
      resourcePath: /request/{reqId}
      description: "Delete details of a specific request"
    PostUtilToDesignNetwork:
      method: post
      resourcePath: /util/net/design
      description: "Design a hierarchical network configuration of a VPC network or multi-cloud network consisting of multiple VPC networks"
    LookupSpecList:
      method: post
      resourcePath: /lookupSpecs
      description: "Lookup spec list"
    RemoveBastionNodes:
      method: delete
      resourcePath: /ns/{nsId}/mci/{mciId}/bastion/{bastionVmId}
      description: "Remove a bastion VM from all vNets"
    GetObject:
      method: get
      resourcePath: /object
      description: "Get value of an object"
    DeleteObject:
      method: delete
      resourcePath: /object
      description: "Delete an object"
    PutSetK8sNodeGroupAutoscaling:
      method: put
      resourcePath: /ns/{nsId}/k8scluster/{k8sClusterId}/k8snodegroup/{k8sNodeGroupName}/onautoscaling
      description: "Set a K8sNodeGroup's Autoscaling On/Off"
    PostMciVmSnapshot:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/vm/{vmId}/snapshot
      description: "Snapshot VM and create a Custom Image Object using the Snapshot"
    GetAllConfig:
      method: get
      resourcePath: /config
      description: "List all configs"
    PostConfig:
      method: post
      resourcePath: /config
      description: "Create or Update config (TB_SPIDER_REST_URL, TB_DRAGONFLY_REST_URL, ...)"
    InitAllConfig:
      method: delete
      resourcePath: /config
      description: "Init all configs"
    DeleteObjects:
      method: delete
      resourcePath: /objects
      description: "Delete child objects along with the given object"
    GetObjects:
      method: get
      resourcePath: /objects
      description: "List all objects for a given key"
    GetRegion:
      method: get
      resourcePath: /provider/{providerName}/region/{regionName}
      description: "Get registered region info"
    PutChangeK8sNodeGroupAutoscaleSize:
      method: put
      resourcePath: /ns/{nsId}/k8scluster/{k8sClusterId}/k8snodegroup/{k8sNodeGroupName}/autoscalesize
      description: "Change a K8sNodeGroup's Autoscale Size"
    PostRegisterCSPNativeVM:
      method: post
      resourcePath: /ns/{nsId}/registerCspVm
      description: "Register existing VM in a CSP to Cloud-Barista MCI"
    DelMciPolicy:
      method: delete
      resourcePath: /ns/{nsId}/policy/mci/{mciId}
      description: "Delete MCI Policy"
    GetMciPolicy:
      method: get
      resourcePath: /ns/{nsId}/policy/mci/{mciId}
      description: "Get MCI Policy"
    PostMciPolicy:
      method: post
      resourcePath: /ns/{nsId}/policy/mci/{mciId}
      description: "Create MCI Automation policy"
    PostSystemMci:
      method: post
      resourcePath: /systemMci
      description: "Create System MCI Dynamically for Special Purpose"
    LookupImageList:
      method: post
      resourcePath: /lookupImages
      description: "Lookup image list"
    SearchImage:
      method: post
      resourcePath: /ns/{nsId}/resources/searchImage
      description: "Search image"
    GetAllSecurityGroup:
      method: get
      resourcePath: /ns/{nsId}/resources/securityGroup
      description: "List all Security Groups or Security Groups' ID"
    PostSecurityGroup:
      method: post
      resourcePath: /ns/{nsId}/resources/securityGroup
      description: "Create Security Group"
    DelAllSecurityGroup:
      method: delete
      resourcePath: /ns/{nsId}/resources/securityGroup
      description: "Delete all Security Groups"
    PostMciVmDynamic:
      method: post
      resourcePath: /ns/{nsId}/mci/{mciId}/vmDynamic
      description: "Create VM Dynamically and add it to MCI"
    GetMonitorData:
      method: get
      resourcePath: /ns/{nsId}/monitoring/mci/{mciId}/metric/{metric}
      description: "Get monitoring data of specified MCI for specified monitoring metric (cpu, memory, disk, network)"
    GetAvailableK8sClusterVersion:
      method: get
      resourcePath: /availableK8sClusterVersion
      description: "Get available kubernetes cluster version"
    GetCloudInfo:
      method: get
      resourcePath: /cloudInfo
      description: "Get cloud information"
    PostCmdMci:
      method: post
      resourcePath: /ns/{nsId}/cmd/mci/{mciId}
      description: "Send a command to specified MCI"
  
  # 240826 updated : https://raw.githubusercontent.com/m-cmp/mc-iam-manager/docs/swagger/swagger.json
  mc-iam-manager:
    Getworkspaceuserrolemappinglistbyuserid:
      method: get
      resourcePath: /api/wsuserrole/user/id/{userId}
      description: "workspace - user - role mapping 목록 user 기준 조회"
    Authgetuservalidate:
      method: get
      resourcePath: /api/auth/validate
      description: "유저 토큰의 사용가능 유무"
    ResetresourceNotuse:
      method: delete
      resourcePath: /api/resource/reset
      description: "ResetResource#notuse"
    Searchrolesbyname:
      method: get
      resourcePath: /api/role/name/{roleName}
      description: "role 검색"
    Syncprojectlistwithmcinfra:
      method: get
      resourcePath: /api/tool/mcinfra/sync
      description: "연결된 TB(mcinframanager)의 NS 리스트를 Project List 로 등록.  \n  \n기존 등록된 project 와 중복이 발생하면 오류 발생. 새로운 환경에서 첫 회 실행하는 것을 추천."
    Getworkspaceuserrolemappinglistbyworkspaceid:
      method: get
      resourcePath: /api/wsuserrole/workspace/id/{workspaceId}
      description: "workspace - user - role mapping 목록 workspace 기준 조회"
    Deletepermission:
      method: delete
      resourcePath: /api/permission/id/{permissionId}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Getpermission:
      method: get
      resourcePath: /api/permission/id/{permissionId}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Updatepermission:
      method: put
      resourcePath: /api/permission/id/{permissionId}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Getprojectlist:
      method: get
      resourcePath: /api/prj
      description: "project 목록 조회"
    Createproject:
      method: post
      resourcePath: /api/prj
      description: "project 생성"
    Deleteresource:
      method: delete
      resourcePath: /api/resource/id/{id}
      description: "DeleteResource"
    Updateresource:
      method: put
      resourcePath: /api/resource/id/{id}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Searchworkspacesbyname:
      method: get
      resourcePath: /api/ws/workspace/{workspaceName}
      description: "workspace 검색"
    Getpermissionticketbyoperationid:
      method: get
      resourcePath: /api/ticket/framework/{framework}/operationid/{operationid}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Getwpmappinglistbyworkspaceid:
      method: get
      resourcePath: /api/wsprj/workspace/id/{workspaceId}
      description: "workspace - projects mapping workspace 기준 단건 목록 조회"
    Login:
      method: post
      resourcePath: /api/auth/login
      description: "ID/Password를 받아 JWT 세션 토큰을 반환"
    UpdateuseinfoNotuse:
      method: put
      resourcePath: /api/auth/userinfo
      description: "유저 정보 조회"
    DeactivateuserNotuse:
      method: delete
      resourcePath: /api/auth/userinfo
      description: "유저 정보 조회"
    Getuserinfo:
      method: get
      resourcePath: /api/auth/userinfo
      description: "유저 정보 조회"
    Getpermissions:
      method: get
      resourcePath: /api/permission
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Createpermission:
      method: post
      resourcePath: /api/permission
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Deleteprojectbyid:
      method: delete
      resourcePath: /api/prj/project/id/{projectId}
      description: "project 삭제"
    Getprojectbyid:
      method: get
      resourcePath: /api/prj/project/id/{projectId}
      description: "project 단건 조회"
    Updateprojectbyid:
      method: put
      resourcePath: /api/prj/project/id/{projectId}
      description: "project 수정"
    Createwpmapping:
      method: post
      resourcePath: /api/wsprj
      description: "workspace - projects mapping 생성"
    Updatewpmappings:
      method: put
      resourcePath: /api/wsprj
      description: "workspace - projects mapping 수정\n\n새로 입력되는 projects 와 기존 projects 를 비교하여, 없는 project 는 삭제하고, 신규 projects 는 새로 mapping 한다."
    Getwpmappinglistorderbyworkspace:
      method: get
      resourcePath: /api/wsprj
      description: "workspace - projects mapping workspace 기준 모든 목록 조회"
    Deleteworkspaceprojectmappingbyid:
      method: delete
      resourcePath: /api/wsprj/workspace/id/{workspaceId}/project/id/{projectId}
      description: "workspace - projects mapping 단건 삭제"
    Logout:
      method: post
      resourcePath: /api/auth/logout
      description: "AccessToken및 RefreshToken을 받아 해당 토큰 파기"
    Createresourcesbyswagger:
      method: post
      resourcePath: /api/resource/file/framework/{framework}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Getworkspacelist:
      method: get
      resourcePath: /api/ws
      description: "workspace 목록 조회"
    Createworkspace:
      method: post
      resourcePath: /api/ws
      description: "workspace 생성"
    Getworkspacebyid:
      method: get
      resourcePath: /api/ws/workspace/id/{workspaceId}
      description: "workspace 단건 조회"
    Updateworkspacebyid:
      method: put
      resourcePath: /api/ws/workspace/id/{workspaceId}
      description: "workspace 수정"
    Deleteworkspacebyid:
      method: delete
      resourcePath: /api/ws/workspace/id/{workspaceId}
      description: "workspace 삭제"
    Getcerts:
      method: get
      resourcePath: /api/auth/certs
      description: "유저 토큰의 사용가능 유무"
    Searchprojectsbyname:
      method: get
      resourcePath: /api/prj/project/{projectName}
      description: "project 목록 검색"
    Getallpermissions:
      method: get
      resourcePath: /api/ticket
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Loginrefresh:
      method: post
      resourcePath: /api/auth/login/refresh
      description: "refresh_token과 기존 JWT를 받아, 새로운 JWT 토큰 발급"
    Gettokeninfo:
      method: get
      resourcePath: /api/auth/tokeninfo
      description: "유저 정보 조회"
    GetrolebypolicyidNotuse:
      method: get
      resourcePath: /api/role/policyid/{policyid}
      description: "role 단건 조회"
    Getallavailablemenus:
      method: get
      resourcePath: /api/ticket/menus
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Deleteuser:
      method: delete
      resourcePath: /api/user/id/{userid}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Updateuser:
      method: put
      resourcePath: /api/user/id/{userid}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Deleteworkspaceuserrolemapping:
      method: delete
      resourcePath: /api/wsuserrole/workspace/id/{workspaceId}/user/id/{userId}
      description: "workspace - user - role mapping 목록 workspace 와 user 로 mapping 삭제"
    Getworkspaceuserrolemappingbyid:
      method: get
      resourcePath: /api/wsuserrole/workspace/id/{workspaceId}/user/id/{userId}
      description: "workspace - user - role mapping 목록 workspace 와 user 로 role 조회"
    Getresources:
      method: get
      resourcePath: /api/resource
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Createresource:
      method: post
      resourcePath: /api/resource
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Getmenuresources:
      method: get
      resourcePath: /api/resource/menus
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Getrolelist:
      method: get
      resourcePath: /api/role
      description: "role 전체 목록 조회"
    Createrole:
      method: post
      resourcePath: /api/role
      description: "role 생성"
    Deleterolebyid:
      method: delete
      resourcePath: /api/role/id/{roleId}
      description: "role 수정"
    Getrolebyid:
      method: get
      resourcePath: /api/role/id/{roleId}
      description: "role 단건 조회"
    Updaterolebyid:
      method: put
      resourcePath: /api/role/id/{roleId}
      description: "role 수정"
    Readyz:
      method: get
      resourcePath: /readyz
      description: "mc-iam-manager가 정상적으로 작동중인지 단순 확인합니다."
    Securitykey:
      method: get
      resourcePath: /api/poc/sts/securitykey
      description: "임시보안자격증명 발급요청\n\nPOC 단계.\n\nAWS / Alibaba OIDC 기반 Keyclaok IDP 사용으로 연결 설정 필요"
    Createwebmenubyyaml:
      method: post
      resourcePath: /api/resource/file/framework/{framework}/menu
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Getusers:
      method: get
      resourcePath: /api/user
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Createuser:
      method: post
      resourcePath: /api/user
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Getworkspaceuserrolemappinglistorderbyworkspace:
      method: get
      resourcePath: /api/wsuserrole
      description: "workspace - user - role mapping 목록 workspace 기준 전체 조회"
    Createworkspaceuserrolemappingbyname:
      method: post
      resourcePath: /api/wsuserrole
      description: "workspace - user - role mapping 생성"
  
  # 240826 updated : https://raw.githubusercontent.com/m-cmp/mc-web-console/main/mc_web_console_api/docs/swagger.json
  mc-web-console:
    Weblogin:
      method: post
      resourcePath: /api/auth/login
      description: "webLogin"
    Weblogout:
      method: post
      resourcePath: /api/auth/logout
      description: "webLogout"
    Webloginrefresh:
      method: post
      resourcePath: /api/auth/refresh
      description: "webLoginRefresh"
    Webdisklookup:
      method: post
      resourcePath: /api/disklookup
      description: "webDiskLookup"
    Webanycontroller:
      method: post
      resourcePath: /api/{operationId}
      description: "webAnyController"
    Webgetuserinfo:
      method: post
      resourcePath: /api/auth/userinfo
      description: "webGetUserInfo"
    Webvalidate:
      method: post
      resourcePath: /api/auth/validate
      description: "webValidate"
    Webavailabledisktypebyproviderregion:
      method: post
      resourcePath: /api/availabledisktypebyproviderregion
      description: "webAvailableDiskTypeByProviderRegion"
    Webcreatemenuresources:
      method: post
      resourcePath: /api/createmenuresources
      description: "webCreateMenuResources"